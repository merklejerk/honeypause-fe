import{B as f,g as h,s as m,d as b,i as g,c as w,a as k,e as O,H as p,b as E}from"./2.Rfqk6gq7.js";class L extends f{constructor({callbackSelector:s,cause:e,data:n,extraData:o,sender:u,urls:a}){var c;super(e.shortMessage||"An error occurred while fetching for an offchain result.",{cause:e,metaMessages:[...e.metaMessages||[],(c=e.metaMessages)!=null&&c.length?"":[],"Offchain Gateway Call:",a&&["  Gateway URL(s):",...a.map(d=>`    ${h(d)}`)],`  Sender: ${u}`,`  Data: ${n}`,`  Callback selector: ${s}`,`  Extra data: ${o}`].flat()}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupError"})}}class x extends f{constructor({result:s,url:e}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${h(e)}`,`Response: ${m(s)}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupResponseMalformedError"})}}class M extends f{constructor({sender:s,to:e}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${e}`,`OffchainLookup sender address: ${s}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupSenderMismatchError"})}}const P="0x556f1830",R={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function j(i,{blockNumber:s,blockTag:e,data:n,to:o}){const{args:u}=b({data:n,abi:[R]}),[a,c,d,t,r]=u;try{if(!g(o,a))throw new M({sender:a,to:o});const l=await $({data:d,sender:a,urls:c}),{data:y}=await w(i,{blockNumber:s,blockTag:e,data:k([t,O([{type:"bytes"},{type:"bytes"}],[l,r])]),to:o});return y}catch(l){throw new L({callbackSelector:t,cause:l,data:n,extraData:r,sender:a,urls:c})}}async function $({data:i,sender:s,urls:e}){var o;let n=new Error("An unknown error occurred.");for(let u=0;u<e.length;u++){const a=e[u],c=a.includes("{data}")?"GET":"POST",d=c==="POST"?{data:i,sender:s}:void 0;try{const t=await fetch(a.replace("{sender}",s).replace("{data}",i),{body:JSON.stringify(d),method:c});let r;if((o=t.headers.get("Content-Type"))!=null&&o.startsWith("application/json")?r=(await t.json()).data:r=await t.text(),!t.ok){n=new p({body:d,details:r!=null&&r.error?m(r.error):t.statusText,headers:t.headers,status:t.status,url:a});continue}if(!E(r)){n=new x({result:r,url:a});continue}return r}catch(t){n=new p({body:d,details:t.message,url:a})}}throw n}export{$ as ccipFetch,j as offchainLookup,R as offchainLookupAbiItem,P as offchainLookupSignature};
